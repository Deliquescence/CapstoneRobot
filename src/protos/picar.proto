syntax = "proto3";
package CapstoneRobot;

option csharp_namespace = "RobotClient";


//Interface exported by the server
service PiCar {

	// Handshake between PiCar and desktop application.
	// All clients starting from the initial version expect this. Do not change.
	rpc ReceiveConnection(ConnectRequest) returns (ConnectAck) {}
	
	//Changes the operating mode of the PiCar
	rpc SwitchMode(ModeRequest) returns (ModeAck) {}
	
	//Receive control data from desktop application
	rpc RemoteControl(stream SetMotion) returns (Empty) {}
	
	//Begin video/action streaming
	rpc StartStream(StartStreaming) returns (stream StreamData) {}
	
	//End video/action streaming
	rpc StopStream(StopStreaming) returns (Empty) {}

	// Switch model
	rpc SwitchFollowerModel(ModelVersion) returns (SwitchModelAck) {}
}

message ModelVersion {
    int32 version = 1;
}

message SwitchModelAck {
    bool success = 1;
}

//An empty message
message Empty {}

//Sent from the desktop application to confirm a working connection
message ConnectRequest {
	string message = 1;
}

//Sent from the PiCar once a ConnectRequest has been received
message ConnectAck {
	//Boolean, returns True for working connection, False if not accepted for some reason
	bool success = 1;

	// Returns the semantic version of the protocol supported by the server.
	// All clients starting from the initial version expect this. Do not change.
    SemVer version = 2;
}

// All clients starting from the initial version expect this. Do not change.
// The major version returned by the server shall be incremented for incompatible API changes.
// The minor version returned shall be incremented for backwards-compatible additions to the API.
// The patch version returned shall be incremented for backwards-compatible bug fixes.
message SemVer {
    uint32 major = 1;
    uint32 minor = 2;
    uint32 patch = 3;
}

//Sent from application to set the operation mode of the PiCar
message ModeRequest {
	//Sets the operation mode for the 
	enum Mode {
		IDLE = 0;
		LEAD = 1;
		FOLLOW = 2;
	}
	Mode mode = 1;
}

//Sent from the PiCar once a ModeRequest has been received
message ModeAck {
	//Boolean, returns True for success, False if not accepted for some reason
	bool success = 1;
}

//Sent from application to control the movements of the lead PiCar
message SetMotion {
	//Contains the throttle speed
	//	1.0 denotes max forward speed
	//	-1.0 denotes max backward speed
	double throttle = 1;
	
	//Contains direction wheels should turn to
	//	0.0 denotes forward
	//	1.0 denotes max right
	//	-1.0 denotes max left
	double direction = 2;
}

// Message to indicate to begin streaming video and actions
message StartStreaming {
    // Decorate the returned frames
	bool decorate = 1;
}

message StopStreaming {
	//Message to indiciate to stop streaming video and actions
}

message StreamData {
	//A bytestring containing the image data
	bytes image = 1;
	//The action taken by the car
	SetMotion action = 2;
}
